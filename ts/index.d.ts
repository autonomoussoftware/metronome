/* Generated by ts-generator ver. 0.0.5 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface AuctionsContract extends Truffle.Contract<AuctionsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AuctionsInstance>;
}

export interface AutonomousConverterContract
  extends Truffle.Contract<AutonomousConverterInstance> {}

export interface ChainLedgerContract
  extends Truffle.Contract<ChainLedgerInstance> {}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {}

export interface ITokenPorterContract
  extends Truffle.Contract<ITokenPorterInstance> {}

export interface METTokenContract extends Truffle.Contract<METTokenInstance> {}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface MintableContract extends Truffle.Contract<MintableInstance> {}

export interface MockContractReceiverContract
  extends Truffle.Contract<MockContractReceiverInstance> {}

export interface MockFixedMathContract
  extends Truffle.Contract<MockFixedMathInstance> {}

export interface MockFixedSupplyTokenContract
  extends Truffle.Contract<MockFixedSupplyTokenInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<MockFixedSupplyTokenInstance>;
}

export interface MockFormulaContract
  extends Truffle.Contract<MockFormulaInstance> {}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface OwnedContract extends Truffle.Contract<OwnedInstance> {}

export interface PricerContract extends Truffle.Contract<PricerInstance> {}

export interface ProceedsContract extends Truffle.Contract<ProceedsInstance> {}

export interface SmartTokenContract
  extends Truffle.Contract<SmartTokenInstance> {}

export interface TokenContract extends Truffle.Contract<TokenInstance> {}

export interface TokenLockerContract
  extends Truffle.Contract<TokenLockerInstance> {
  "new"(
    _auctions: string | BigNumber,
    _token: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<TokenLockerInstance>;
}

export interface TokenPorterContract
  extends Truffle.Contract<TokenPorterInstance> {}

export interface ValidatorContract
  extends Truffle.Contract<ValidatorInstance> {}

export interface AuctionsInstance {
  priceAt(
    initialPrice: number | BigNumber | string,
    _n: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  priceAtInitialAuction(
    lastPurchasePrice: number | BigNumber | string,
    numTicks: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  founders(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  tokenLockers(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  whichTick(
    t: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  whichAuction(
    t: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  heartbeat(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  whatWouldPurchaseDo(
    _wei: number | BigNumber | string,
    _timestamp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initPricer(txDetails?: Truffle.TransactionDetails): Promise<void>;

  skipInitBecauseIAmNotOg(
    _token: string | BigNumber,
    _proceeds: string | BigNumber,
    _genesisTime: number | BigNumber | string,
    _minimumPrice: number | BigNumber | string,
    _startingPrice: number | BigNumber | string,
    _timeScale: number | BigNumber | string,
    _chain: string | BigNumber,
    _initialAuctionEndTime: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initAuctions(
    _startTime: number | BigNumber | string,
    _minimumPrice: number | BigNumber | string,
    _startingPrice: number | BigNumber | string,
    _timeScale: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  createTokenLocker(
    _founder: string | BigNumber,
    _token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  mintInitialSupply(
    _founders: (number | BigNumber | string)[],
    _token: string | BigNumber,
    _proceeds: string | BigNumber,
    _autonomousConverter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  stopEverything(txDetails?: Truffle.TransactionDetails): Promise<void>;

  prepareAuctionForNonOGChain(
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  initialAuctionEndTime(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  minimumPriceInDailyAuction(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  MULTIPLIER(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  tentimes(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  lastPurchaseTick(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  INITIAL_AC_SUPPLY(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  INITIAL_SUPPLY(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  hundredtimes(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  genesisTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  dailyAuctionStartTime(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintable(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  minted(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  proceeds(txDetails?: Truffle.TransactionDetails): Promise<string>;
  INITIAL_GLOBAL_DAILY_SUPPLY(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  totalMigratedIn(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  minimumPrice(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lastPurchasePrice(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  thousandtimes(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  initialAuctionDuration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  chain(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  DAILY_PURCHASE_LIMIT(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  INITIAL_FOUNDER_SUPPLY(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  globalSupplyAfterPercentageLogic(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  totalMigratedOut(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  AUCTION_WHEN_PERCENTAGE_LOGIC_STARTS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  timeScale(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isRunning(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  currentTick(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  currentAuction(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  isInitialAuctionEnded(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
  globalMetSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  globalDailySupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  currentPrice(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  dailyMintable(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  tokensOnThisChain(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  currentMintable(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface AutonomousConverterInstance {
  getMetForEthResult(
    _depositAmount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEthForMetResult(
    _depositAmount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  init(
    _reserveToken: string | BigNumber,
    _smartToken: string | BigNumber,
    _auctions: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  handleFund(txDetails?: Truffle.TransactionDetails): Promise<void>;

  convertEthToMet(
    _mintReturn: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  convertMetToEth(
    _amount: number | BigNumber | string,
    _mintReturn: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  auctions(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  smartToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  reserveToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getMetBalance(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  getEthBalance(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ChainLedgerInstance {
  chains(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validChain(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balance(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initChainLedger(
    _tokenPorter: string | BigNumber,
    _auctionsAddr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  registerChain(
    chain: string | BigNumber,
    supply: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  registerExport(
    originChain: string | BigNumber,
    destChain: string | BigNumber,
    amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  registerImport(
    originChain: string | BigNumber,
    destChain: string | BigNumber,
    amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  tokenPorter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  auctions(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ERC20Instance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ITokenPorterInstance {
  export(
    tokenOwner: string | BigNumber,
    _destChain: string | BigNumber,
    _destMetronomeAddr: string | BigNumber,
    _destRecipAddr: string | BigNumber,
    _amount: number | BigNumber | string,
    _fee: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  importMET(
    _originChain: string | BigNumber,
    _destinationChain: string | BigNumber,
    _addresses: (string | BigNumber)[],
    _extraData: (string | BigNumber)[],
    _burnHashes: (string | BigNumber)[],
    _supplyOnAllChains: (number | BigNumber | string)[],
    _importData: (number | BigNumber | string)[],
    _proof: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface METTokenInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  roots(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  subs(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getRoot(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  rootsMatch(
    a: string | BigNumber,
    b: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getSubscription(
    _owner: string | BigNumber,
    _recipient: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setTokenPorter(
    _tokenPorter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initToken(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  mint(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approveMore(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approveLess(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  destroy(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initMintable(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  initMETToken(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  enableMETTransfers(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  multiTransfer(
    bits: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setRoot(
    data: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  importMET(
    _originChain: string | BigNumber,
    _destinationChain: string | BigNumber,
    _addresses: (string | BigNumber)[],
    _extraData: (string | BigNumber)[],
    _burnHashes: (string | BigNumber)[],
    _supplyOnAllChains: (number | BigNumber | string)[],
    _importData: (number | BigNumber | string)[],
    _proof: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  export(
    _destChain: string | BigNumber,
    _destMetronomeAddr: string | BigNumber,
    _destRecipAddr: string | BigNumber,
    _amount: number | BigNumber | string,
    _fee: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  subscribe(
    _startTime: number | BigNumber | string,
    _payPerWeek: number | BigNumber | string,
    _recipient: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  cancelSubscription(
    _recipient: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  subWithdraw(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  multiSubWithdraw(
    _owners: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  multiSubWithdrawFor(
    _owners: (string | BigNumber)[],
    _recipients: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  minter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  transferAllowed(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  tokenPorter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  autonomousConverter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface MigrationsInstance {
  setCompleted(
    completed: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  upgrade(
    new_address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface MintableInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initMintable(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setTokenPorter(
    _tokenPorter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  destroy(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  minter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  tokenPorter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  autonomousConverter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface MockContractReceiverInstance {
  onTokenTransfer(
    n: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  onTokenApprove(
    n: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface MockFixedMathInstance {
  fMulMock(
    x: number | BigNumber | string,
    y: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  fDivMock(
    numerator: number | BigNumber | string,
    divisor: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  fSqrtMock(
    n: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface MockFixedSupplyTokenInstance {
  balanceOf(
    tokenOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    tokenOwner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  transfer(
    to: string | BigNumber,
    tokens: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approve(
    spender: string | BigNumber,
    tokens: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom(
    from: string | BigNumber,
    to: string | BigNumber,
    tokens: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  _totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface MockFormulaInstance {
  returnForMintTest(
    smartTokenSupply: number | BigNumber | string,
    reserveTokensSent: number | BigNumber | string,
    reserveTokenBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  returnForRedemptionTest(
    smartTokenSupply: number | BigNumber | string,
    smartTokensSent: number | BigNumber | string,
    reserveTokenBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface OwnableInstance {
  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface OwnedInstance {
  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface PricerInstance {
  priceAt(
    initialPrice: number | BigNumber | string,
    _n: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  priceAtInitialAuction(
    lastPurchasePrice: number | BigNumber | string,
    numTicks: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  initPricer(txDetails?: Truffle.TransactionDetails): Promise<void>;

  minimumPriceInDailyAuction(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  MULTIPLIER(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  tentimes(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  hundredtimes(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  minimumPrice(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  thousandtimes(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ProceedsInstance {
  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initProceeds(
    _autonomousConverter: string | BigNumber,
    _auctions: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  handleFund(txDetails?: Truffle.TransactionDetails): Promise<void>;

  closeAuction(txDetails?: Truffle.TransactionDetails): Promise<void>;

  autonomousConverter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  auctions(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface SmartTokenInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setTokenPorter(
    _tokenPorter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  destroy(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initMintable(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  initSmartToken(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  minter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  tokenPorter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  autonomousConverter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TokenInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setTokenPorter(
    _tokenPorter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  destroy(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initMintable(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  initToken(
    _autonomousConverter: string | BigNumber,
    _minter: string | BigNumber,
    _initialSupply: number | BigNumber | string,
    _decmult: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  multiTransfer(
    bits: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approveMore(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approveLess(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  minter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  tokenPorter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  autonomousConverter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TokenLockerInstance {
  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lockTokenLocker(txDetails?: Truffle.TransactionDetails): Promise<void>;

  deposit(
    beneficiary: string | BigNumber,
    amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  withdraw(txDetails?: Truffle.TransactionDetails): Promise<void>;

  quarterlyWithdrawable(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  auctions(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  lastWithdrawTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  locked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  deposited(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TokenPorterInstance {
  claimables(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  exportedBurns(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  supplyOnAllChains(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  destinationChains(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initTokenPorter(
    _tokenAddr: string | BigNumber,
    _auctionsAddr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setValidator(
    _validator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setChainLedger(
    _chainLedger: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addDestinationChain(
    _chainName: string | BigNumber,
    _contractAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  removeDestinationChain(
    _chainName: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  claimReceivables(
    recipients: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  importMET(
    _originChain: string | BigNumber,
    _destinationChain: string | BigNumber,
    _addresses: (string | BigNumber)[],
    _extraData: (string | BigNumber)[],
    _burnHashes: (string | BigNumber)[],
    _supplyOnAllChains: (number | BigNumber | string)[],
    _importData: (number | BigNumber | string)[],
    _proof: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  export(
    tokenOwner: string | BigNumber,
    _destChain: string | BigNumber,
    _destMetronomeAddr: string | BigNumber,
    _destRecipAddr: string | BigNumber,
    _amount: number | BigNumber | string,
    _fee: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  importSequence(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  validator(txDetails?: Truffle.TransactionDetails): Promise<string>;
  burnSequence(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  auctions(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  chainLedger(txDetails?: Truffle.TransactionDetails): Promise<string>;
  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ValidatorInstance {
  validatorNum(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  validators(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  hashClaimed(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  hashAttestations(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isValidator(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  hashClaimable(
    hash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isReceiptClaimable(
    _originChain: string | BigNumber,
    _destinationChain: string | BigNumber,
    _addresses: (string | BigNumber)[],
    _extraData: (string | BigNumber)[],
    _burnHashes: (string | BigNumber)[],
    _supplyOnAllChain: (number | BigNumber | string)[],
    _importData: (number | BigNumber | string)[],
    _proof: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  changeOwnership(
    _newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptOwnership(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initValidator(
    _validator1: string | BigNumber,
    _validator2: string | BigNumber,
    _validator3: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setTokenPorter(
    _tokenPorter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  validateHash(
    hash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  invalidateHash(
    hash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  claimHash(
    hash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  metToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
  threshold(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  tokenPorter(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  newOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}
