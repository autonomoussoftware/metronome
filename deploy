#!/bin/bash
#set -e
#set -o pipefail

<< LICENSE
The MIT License (MIT)

Copyright 2017 - 2018, Alchemy Limited, LLC.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
LICENSE

usage()
{
  cat <<- _EOM_
  deploy: compile and push  metronome to a local parity instance by default,
  overriding auction launch date, price and supply, if specified.

  By default, deploy deploys to a local clean ETH "dev chain" instance of parity.

  If --test is offered, deploy will connect to the New Alchemy test network and
  deploy there. Note you will need NA testnet ETH. Contact your SA for help.

  If --live is offered, deploy will connect to the default parity instance.

  If --chain etc is offered, deploy will deploy to ETC. Note that deploy will
  consider ETC to be the "Non OG" chain, and initialize a destination metronome.

  usage: deploy [--supply supply of Metronome] [-P | --pass <password> ]
  [-p | --price <price at start of MET Auction] [--live | --test]
  [--auction auction_epoch_seconds] [-t | --timescale Time Mult]
  [-i | --interactive] [--seed ] [--chain eth|etc ] | [-h]

_EOM_

}

check_system()
{
  unameOut="$(uname -s)"
  case "${unameOut}" in
    Linux*)     SOLDEPLOY=bin/soldeploy.amd64.bin;;
    Darwin*)    SOLDEPLOY=bin/soldeploy.osx.bin;;
    *)          echo "What Architecture is this? Punting."
      exit 1;;
  esac

  parityString=`parity --version | grep version\ P`
  parityVersion=${parityString:18:3}	
  if [[ "$parityString" = *"1.10"* ]]; then
    echo "You have Parity 1.10"
  else
    echo "Need Parity 1.10 - You have $parityString. Punting."
    exit 1
  fi

  mkdir -p log
}

check_system

AUCTION=0
SEED=""
INTERACTIVE=0
SUPPLY=10000000
DEST="Parity DevChain Local ETH"
LIVE=0
PASS=""
TEST=0
LOCAL=1
TIMESCALE=1
CHAIN="eth"
RPC=8545
WS=8546
PORT=33333
CHAINARG="--chain dev"
BOOTNODES=""
DATADIR=/tmp/parity/local/eth
GASARGS="--reseal-min-period 0 --min-gas-price 0 --gasprice 0" 
RPCAPI="--rpcapi=web3,eth,personal,rpc,net,parity "

ETH_TEST_BOOTNODE="enode://a90b36105811c87207b3a9bef260c2bff02355b0f8c1bfbc1e8341ee332fc803bc0f62cbec61fcc443228580a7f2ec3eeab3b57a649203f6ae6955e54ee9dfac@35.202.109.171:30303"
ETC_TEST_BOOTNODE="enode://5c604378ba83b38a4d8a47e45305d4c5b3a6841172fe2b55e062bde6fdd8b7a6f44f01ef5cc8e4c3a5d40ce78d2040e33b4f9697d23f9c20a1914e24278477d3@35.184.26.97:30303"
ETH_TEST_PARITYSPEC="parity-spec.json"
ETC_TEST_PARITYSPEC="parity-spec-etc.json"

# Price in ETH per MET at start
PRICE=2

while [ "$1" != "" ]; do
  case $1 in
    --live )      		PARITY="parity >log/parity.eth.log 2>log/parity.eth.err.log"
      DEST="Eth Live Net"
      LIVE=1
      LOCAL=0
      ;;
    --test )
      LIVE=0
      TEST=1
      LOCAL=0
      ;;
    -h | --help )           usage
      exit
      ;;
    -s | --supply )         shift
      SUPPLY=$1
      ;;
    -p | --price )         shift
      PRICE=$1
      ;;
    -a | --auction )	shift
      AUCTION=$1
      ;;
    -P | --pass ) 		shift
      PASS=$1
      ;;
    -c | --chain )		shift
      CHAIN=$1
      ;;
    -t | --timescale ) 	shift
      TIMESCALE=$1
      ;;
    -i | --interactive )
      INTERACTIVE=1
      ;;
    --seed )
      SEED=,js/$CHAIN/testStart.js
      ;;
    * )                     usage
      exit 1
  esac
  shift
done

if [[ "$CHAIN" = "eth" ]]
then
  SUPPLY=10000000
  RPC=8545
  WS=8546
  PORT=33333
  if [[ $LIVE = 1 ]]
  then
    DEST="Eth Live Net"
  elif [[ $TEST = 1 ]]
  then
     DATADIR=./parity/testnet/eth
     DEST="New Alchemy ETH Testnet"
     CHAINARG="--chain $ETH_TEST_PARITYSPEC"
     BOOTNODES="--bootnodes $ETH_TEST_BOOTNODE"
  else
    DATADIR=/tmp/parity/local/eth
    DEST="Parity DevChain Local ETH"
  fi
elif [[ "$CHAIN" = "etc" ]]
then
  SUPPLY=0
  RPC=8555
  WS=8556
  PORT=30305
  if [[ $LIVE = 1 ]]
  then
    DEST="Etc Live Net"
    CHAINARG="--chain classic"
  elif [[ $TEST = 1 ]]
  then
     DATADIR=./parity/testnet/etc
     DEST="New Alchemy ETC Testnet"
     CHAINARG="--chain $ETC_TEST_PARITYSPEC"
     BOOTNODES="--bootnodes $ETC_TEST_BOOTNODE"
    else
     DATADIR=/tmp/parity/local/etc
     DEST="New Alchemy ETC Local"
  fi
fi

if [[ $LIVE = 0 ]]; then
#  PARITY="parity --geth --fat-db on --jsonrpc-port=$RPC --ws-port=$WS --port=$PORT --datadir=$DATADIR --tracing on  --pruning archive $CHAINARG $BOOTNODES $GASARGS > log/parity.$CHAIN.log 2>log/parity.$CHAIN.err.log"
  PARITY="parity --geth $RPCAPI --jsonrpc-port=$RPC --ws-port=$WS --port=$PORT --datadir=$DATADIR --tracing off  --pruning archive $CHAINARG $BOOTNODES $GASARGS > log/parity.$CHAIN.log 2>log/parity.$CHAIN.err.log"
else
  PARITY="parity --geth $RPCAPI --jsonrpc-port=$RPC --ws-port=$WS --port=$PORT $CHAINARG >log/parity.$CHAIN.log 2>log/parity.$CHAIN.err.log ui"
fi

PARITY_URL="http://127.0.0.1:$RPC"

LOCAL_ETH=$ETHER_ADDR

if [[ $LOCAL = 1 ]]; then
  LOCAL_ETH=0x00a329c0648769a73afac7f9381e08fb43dbea72
  if [[ $AUCTION = 0 ]]; then
    AUCTION=$(expr `date +%s` + 10)
  fi

else
  if [[ $PASS = "" ]]
  then
    echo "Live and Test net deploy requires password. Use -P or --pass."
    exit 1
  fi

  # Give Auction 15 seconds from initialization so we can catch the beginning
  if [[ $AUCTION = 0 ]]
  then
    AUCTION=$(expr `date +%s` + 1)
  fi

fi

echo "About to Deploy Metronome with Supply $SUPPLY, starting $AUCTION (`date -r $AUCTION`) to $DEST.."
if [[ $LOCAL = 1 ]] && [[ $TIMESCALE = 1 ]]
then
  echo "Running on local chain but realtime.. Can I suggest -t 1000?"
fi

read -p "Press enter to continue"

echo "Cleaning up old deploy stuff..."
rm js/$CHAIN/launched

echo "Turning off Parity..."
if [[ "$CHAIN" = "etc" ]] 
then
    CHAINPID=$(lsof -t -i:8555)
    if [[ ! -z "$CHAINPID" ]]; then
	    echo "Turning off ETC parity at port 8555"
	    kill -9 $CHAINPID
    fi
else
    CHAINPID=$(lsof -t -i:8545)
    if [[ ! -z "$CHAINPID" ]]; then
	    echo "Turning off ETH parity at port 8545"
	    kill -9 $CHAINPID
    fi
fi
sleep 5


if [[ $LOCAL = 1 ]]
then
  rm -rf $DATADIR
  mkdir -p $DATADIR
fi

NODES_CACHE=/tmp/natestnet/chains/GethTranslation/network/nodes.json
if [ $TEST = 1 ] && [ -f $NODES_CACHE ]
then
  rm $NODES_CACHE
fi

echo "Loading Parity: $PARITY"
eval $PARITY &

if [ $LIVE = 1 ] || [ $TEST = 1 ]
then
  sleep 5
else
  sleep 1
fi

echo "Authorizing.."
curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"personal_unlockAccount","params":["'$LOCAL_ETH'", "'$PASS'","0x1000"],"id":1}' $PARITY_URL

sleep 10

echo "Deploying on $DEST.."

echo "" > js/$CHAIN/metronome.js

echo -e "contracts/monolithic.sol:Proceeds\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:Auctions\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:AutonomousConverter\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:SmartToken\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:METToken\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:TokenPorter\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:Validator\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:ChainLedger\njs/$CHAIN/metronome.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null

echo "ABIs and Contract info written to $CHAIN/metronome.js"
echo "Supply: $SUPPLY"

#Reading founder list
foundersArray="[]"
if [[ "$CHAIN" = "eth" ]]
then
  input="./foundersList.csv"
  foundersArray="['"
  while IFS=',' read -r f1 f2
  do 
    echo "$f1 $f2"
    foundersArray="$foundersArray$f1$f2'"
    foundersArray="$foundersArray,'"

  done < <(tail -n "+2" $input)
  foundersArray="$foundersArray ]"
  foundersArray=${foundersArray/,\' ]/]}
fi

foundersArray="var FOUNDERS = $foundersArray"
echo $foundersArray
cat <<EOF > js/$CHAIN/const.js
// File generated by deploy -- edits will get overwritten!

var PRICE = $PRICE;
var ONE = 1;
var NUMTOKENS = $SUPPLY;
var START = $AUCTION;
var TIMESCALE = $TIMESCALE
var MINPRICE = 3300000000000
var ETHER_ADDR = '$LOCAL_ETH'
$foundersArray
EOF

if [[ $INTERACTIVE = 1 ]]
then
  geth attach $PARITY_URL --preload js/$CHAIN/metronome.js,js/$CHAIN/const.js,js/common.js,js/$CHAIN/initMetronome.js,js/$CHAIN/launchMetronome.js$SEED
else
  echo "To init and launch: geth attach $PARITY_URL --preload js/$CHAIN/metronome.js,js/$CHAIN/const.js,js/common.js,js/$CHAIN/initMetronome.js,js/$CHAIN/launchMetronome.js$SEED (or use -i for interactive mode) "
fi

exit 0
