#!/bin/bash
#set -e
#set -o pipefail

<< LICENSE
The MIT License (MIT)

Copyright 2017 - 2018, Alchemy Limited, LLC.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
LICENSE

usage()
{
  cat <<- _EOM_
  deploy: compile and push  metronome to a local parity instance by default,
  overriding auction launch date, price and supply, if specified.

  By default, deploy deploys to a local clean ETH "dev chain" instance of parity.
  If -i or --interactive is offerred in local deployment then it will do deploy and launch in one step. 
  If --test is offered, deploy will connect to the New Alchemy test network and
  deploy there. Note you will need NA testnet ETH. Contact your SA for help.
  For live and testnet, launch has to be done in second step after deploy and initialization done
  If --live is offered, deploy will connect to the default parity instance.

  If --chain etc is offered, deploy will deploy to ETC. Note that deploy will
  consider ETC to be the "Non OG" chain, and initialize a destination metronome.

  usage: deploy [--supply supply of Metronome] [-P | --pass <password> ]
  [-p | --price <price at start of MET Auction] [--live | --test]
  [-O | --owner <owner eth address> ] [--auction auction_epoch_seconds] [-t | --timescale Time Mult]
  [-i | --interactive] [--seed ] [--chain eth|etc ] | [-h]
  [-v | --validators <list of three validators address>]

_EOM_

}

check_system()
{
  unameOut="$(uname -s)"
  case "${unameOut}" in
    Linux*)     SOLDEPLOY=bin/soldeploy.amd64.bin;;
    Darwin*)    SOLDEPLOY=bin/soldeploy.osx.bin;;
    *)          echo "What Architecture is this? Punting."
      exit 1;;
  esac

  parityString=`parity --version | grep version\ P`
  parityVersion=${parityString:18:3}  
  if [[ "$parityString" = *"1.10"* ]]; then
    echo "You have Parity 1.10"
  else
    echo "Need Parity 1.10 - You have $parityString. Punting."
    exit 1
  fi

  mkdir -p log
}

check_system

AUCTION=0
SEED=""
INTERACTIVE=0
SUPPLY=10000000
DEST="Parity DevChain Local ETH"
LIVE=0
PASS=""
TEST=0
DEVNET=0
LOCAL=1
TIMESCALE=1
CHAIN="eth"
CHAIN_DIR=js/$CHAIN
RPC=8545
WS=8546
PORT=33333
CHAINARG="--chain dev"
BOOTNODES=""
DATADIR=/tmp/parity/local/eth
GASARGS="--reseal-min-period 0 --min-gas-price 0 --gasprice 0" 
RPCAPI="--rpcapi=web3,eth,personal,rpc,net,parity,parity_accounts,pubsub --ws-apis=web3,eth,personal,rpc,net,parity,parity_accounts,pubsub"
OWNER_ADDRESS=0x0 #Todo- for live network enter owner's actual address here 
#Bloq test nodes
ETH_TEST_BOOTNODE="enode://a90b36105811c87207b3a9bef260c2bff02355b0f8c1bfbc1e8341ee332fc803bc0f62cbec61fcc443228580a7f2ec3eeab3b57a649203f6ae6955e54ee9dfac@35.202.109.171:30303"
ETC_TEST_BOOTNODE="enode://5c604378ba83b38a4d8a47e45305d4c5b3a6841172fe2b55e062bde6fdd8b7a6f44f01ef5cc8e4c3a5d40ce78d2040e33b4f9697d23f9c20a1914e24278477d3@35.184.26.97:30303"
#NA test nodes
#ETH_TEST_BOOTNODE="enode://fa2ffb624f7ade1f432e0a37249b201817bffd597913b7bcde2db93618d7604f68c74fa51e3700e2888a295a80591d03d5d013180866a50c3758cade3b2e92e9@35.227.101.52:33333"
#ETC_TEST_BOOTNODE="enode://b4035a5527d17d588d576c4cfcb3c39d7e308fc4c2fc5720813e21770decd17de3a93602ac4b36422964b479cabb82dfb1dc6c5cfedd4061954dfdbfbc309a6a@35.227.101.52:30303"
ETH_TEST_PARITYSPEC="parity-spec.json"
ETC_TEST_PARITYSPEC="parity-spec-etc.json"
VALIDATORS="[]"

# Price in ETH per MET at start
PRICE=2

while [ "$1" != "" ]; do
  case $1 in
    --live )
      LIVE=1
      LOCAL=0
      TEST=0
      ;;
    --test )
      LIVE=0
      TEST=1
      LOCAL=0
      ;;
    --devnet )
      LIVE=0
      TEST=0
      LOCAL=1
      DEVNET=1
      ;;
    -h | --help ) usage
      exit
      ;;
    -s | --supply ) shift
      SUPPLY=$1
      ;;
    -p | --price ) shift
      PRICE=$1
      ;;
    -a | --auction ) shift
      AUCTION=$1
      ;;
    -v | --validators ) shift
      if [[ "$1" = "0x"* ]] && [[ "$2" = "0x"* ]] && [[ "$3" = "0x"* ]]; then
        VALIDATORS="['$1', '$2', '$3']"
        shift
        shift
      else 
        usage  
        echo "Invalid address of validators or number of address passed is not correct. Require three address. [$1,$2,$3]"
        exit 1
      fi
      ;; 
    -P | --pass ) shift
      PASS=$1
      ;;
    -O | --owner ) shift
      OWNER_ADDRESS=$1
      ;;  
    -c | --chain ) shift
      CHAIN=$1
      CHAIN_DIR=js/$CHAIN
      ;;
    -t | --timescale ) shift
      TIMESCALE=$1
      ;;
    -i | --interactive )
      INTERACTIVE=1
      ;;
    --seed )
      SEED=,$CHAIN_DIR/testStart.js
      ;;
    * ) usage
      exit 1
  esac
  shift
done

if [[ "$CHAIN" = "eth" ]]
then
  SUPPLY=10000000
  RPC=8545
  WS=8546
  PORT=33333
  if [[ $LIVE = 1 ]]
  then
    echo "ETH live net deploy is not allowed."
    exit 1
  elif [[ $TEST = 1 ]]
  then
     DATADIR=./parity/testnet/eth
     DEST="New Alchemy ETH Testnet"
     CHAINARG="--chain $ETH_TEST_PARITYSPEC"
     BOOTNODES="--bootnodes $ETH_TEST_BOOTNODE"
  elif [[ $DEVNET = 1 ]]
  then
     DATADIR=./parity/localnet/eth
     DEST="New Alchemy ETH devnet"
     CHAINARG="--chain devnet.json"
     BOOTNODES="--bootnodes enode://cfc563d0c1ba5aa9a471babfcb876001501ab63ba6e2539054beea91deacbb279a6ba6fab17fb7b020251bf489bc5f3e9d5041c7b541513cb093a4c34c15db0a@35.227.101.52:33333"
  else
    DATADIR=/tmp/parity/local/eth
    DEST="Parity DevChain Local ETH"
  fi
elif [[ "$CHAIN" = "etc" ]]
then
  SUPPLY=0
  RPC=8555
  WS=8556
  PORT=30301
  if [[ $LIVE = 1 ]]
  then
    DEST="Etc Live Net"
    CHAINARG="--chain classic"
  elif [[ $TEST = 1 ]]
  then
     DATADIR=./parity/testnet/etc
     DEST="New Alchemy ETC Testnet"
     CHAINARG="--chain $ETC_TEST_PARITYSPEC"
     BOOTNODES="--bootnodes $ETC_TEST_BOOTNODE"
  elif [[ $DEVNET = 1 ]]
  then
     DATADIR=./parity/localnet/etc
     DEST="New Alchemy ETH devnet"
     CHAINARG="--chain devnet.json"
     BOOTNODES="--bootnodes enode://a28ade8c720013e3ceeb9e65c5fba6cb3a007f62f808a5e9f9aa988b651f2394558b68ffbea8c876829f784237fa98dee7cb8094f121980c47dc6a9d9ddbc3d4@35.227.101.52:30301"
    else
     DATADIR=/tmp/parity/local/etc
     DEST="New Alchemy ETC Local"
  fi
fi

if [[ $LIVE = 0 ]]; then
#  PARITY="parity --geth --fat-db on --jsonrpc-port=$RPC --ws-port=$WS --port=$PORT --datadir=$DATADIR --tracing on  --pruning archive $CHAINARG $BOOTNODES $GASARGS > log/parity.$CHAIN.log 2>log/parity.$CHAIN.err.log"
  PARITY="parity --geth --jsonrpc-apis all --jsonrpc-hosts all --jsonrpc-interface all --jsonrpc-cors all --ws-interface all --ws-origins all --ws-hosts all --rpccorsdomain '*' $RPCAPI --jsonrpc-port=$RPC --ws-port=$WS --port=$PORT --datadir=$DATADIR --tracing off  --pruning archive $CHAINARG $BOOTNODES $GASARGS > log/parity.$CHAIN.log 2>log/parity.$CHAIN.err.log"
else
  PARITY="parity --geth $RPCAPI $CHAINARG > log/parity.$CHAIN.log 2>log/parity.$CHAIN.err.log"
fi

PARITY_URL="http://127.0.0.1:$RPC"

LOCAL_ETH=$ETHER_ADDR

if [[ $LOCAL = 1 ]]; then
  LOCAL_ETH=0x00a329c0648769a73afac7f9381e08fb43dbea72 
  if [[ $AUCTION = 0 ]]; then
    AUCTION=$(expr `date +%s` + 10)
  fi
else
  if [[ $PASS = "" ]]
  then
    echo "Live and Test net deploy requires password. Use -P or --pass."
    exit 1
  fi
  if [[ $OWNER_ADDRESS = 0x0 ]]
  then
    echo " Live and Test net deploy requires owner's address. Use -O or --owner."
    exit 1
  fi
  if [[ $VALIDATORS = "[]" ]]
  then
    echo " Live and Test net deploy requires validators address. Use -v or --validators."
    exit 1
  fi

fi

echo "About to Deploy Metronome with Supply $SUPPLY to $DEST.."
if [[ $LOCAL = 1 ]] && [[ $TIMESCALE = 1 ]]
then
  echo "Running on local chain but realtime.. Can I suggest -t 1000?"
fi

read -p "Press enter to continue"

echo "Cleaning up old deploy stuff..."
rm $CHAIN_DIR/metronome.js  2>/dev/null

echo "Turning off Parity..."
if [[ "$CHAIN" = "etc" ]] 
then
    CHAINPID=$(lsof -t -i:8555)
    if [[ ! -z "$CHAINPID" ]]; then
      echo "Turning off ETC parity at port 8555"
      kill -9 $CHAINPID
    fi
else
    CHAINPID=$(lsof -t -i:8545)
    if [[ ! -z "$CHAINPID" ]]; then
      echo "Turning off ETH parity at port 8545"
      kill -9 $CHAINPID
    fi
fi

sleep 5


if [[ $LOCAL = 1 ]] && [[ $DEVNET = 0 ]]
then
  rm -rf $DATADIR
  mkdir -p $DATADIR
fi

NODES_CACHE=/tmp/natestnet/chains/GethTranslation/network/nodes.json
if [ $TEST = 1 ] && [ -f $NODES_CACHE ]
then
  rm $NODES_CACHE
fi

echo "Loading Parity..."
eval $PARITY &

if [ $LIVE = 1 ] || [ $TEST = 1 ]
then
  sleep 5
else
  sleep 1
fi

#set account for devnet
if [[ $DEVNET = 1 ]]; then
  #create deployer account with default passphrase 
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"parity_newAccountFromPhrase","params":["user", ""],"id":0}' $PARITY_URL >/dev/null
  #LOCAL_ETH=0x004ec07d2329997267Ec62b4166639513386F32E
  LOCAL_ETH=$ETHER_ADDR
  echo "asdbds $LOCAL_ETH"
fi

echo "Authorizing deployer account ..."
curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"personal_unlockAccount","params":["'$LOCAL_ETH'", "'$PASS'","0x3000"],"id":1}' $PARITY_URL >/dev/null

if [[ $LOCAL = 1 ]] && [[ $OWNER_ADDRESS = 0x0 ]]
then 
    sleep 5
    echo "Creating new account for the owner"
    PASS='newOwner'
    response=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"personal_newAccount","params":["'$PASS'"],"id":1}' $PARITY_URL)
    OWNER_ADDRESS=`echo "$response" | jq .result`
    OWNER_ADDRESS=${OWNER_ADDRESS//\"/}
    echo "Metronome owner for dev chain $OWNER_ADDRESS" 
    curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_sendTransaction","params":[{"from":"'$LOCAL_ETH'", "to":"'$OWNER_ADDRESS'", "value":"0x1BC16D674EC80000"}],"id":1}' $PARITY_URL >/dev/null
    curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"personal_unlockAccount","params":["'$OWNER_ADDRESS'", "'$PASS'","0x3000"],"id":1}' $PARITY_URL >/dev/null
fi

sleep 5

echo "Deploying on $DEST.."

TMP_DIR=$CHAIN_DIR/tmp
mkdir $TMP_DIR

echo "" > $CHAIN_DIR/metronome.js

echo -e "contracts/monolithic.sol:Proceeds\n$TMP_DIR/Proceeds.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:Auctions\n$TMP_DIR/Auctions.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:AutonomousConverter\n$TMP_DIR/AutonomousConverter.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:SmartToken\n$TMP_DIR/SmartToken.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:METToken\n$TMP_DIR/METToken.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:TokenPorter\n$TMP_DIR/TokenPorter.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
echo -e "contracts/monolithic.sol:Validator\n$TMP_DIR/Validator.js" | SETH_URL=$PARITY_URL ETHER_ADDR=$LOCAL_ETH $SOLDEPLOY contracts/monolithic.sol >/dev/null
cat $TMP_DIR/Proceeds.js $TMP_DIR/Auctions.js $TMP_DIR/AutonomousConverter.js $TMP_DIR/SmartToken.js $TMP_DIR/METToken.js $TMP_DIR/TokenPorter.js $TMP_DIR/Validator.js > $CHAIN_DIR/metronome.js
rm -r $TMP_DIR

#Reading founder list
foundersArray="[]"
if [[ "$CHAIN" = "eth" ]]
then
  input="./foundersList.csv"
  foundersArray=""
  while IFS=',' read -r f1 f2
  do 
    #echo "$f1 $f2"
    f2=${f2//[$'\r']}
    foundersArray="$foundersArray'$f1$f2', "
  done < <(tail -n "+2" $input)

  foundersArray="[$foundersArray]"
  foundersArray=${foundersArray/, ]/]}
fi

foundersArray="var FOUNDERS = $foundersArray"
#echo $foundersArray
if [[ $LOCAL = 1 ]]  && [[ $VALIDATORS = "[]" ]]; then
  VALIDATORS="['$OWNER_ADDRESS', '$LOCAL_ETH', '$OWNER_ADDRESS']"
  echo "VALIDATORS $VALIDATORS"
fi  

cat <<EOF > $CHAIN_DIR/const.js
// File generated by deploy -- edits will get overwritten!

var PRICE = $PRICE
var ONE = 1
var NUMTOKENS = $SUPPLY
var START = $AUCTION
var TIMESCALE = $TIMESCALE
var MINPRICE = 3300000000000
var ETHER_ADDR = '$LOCAL_ETH'
var OWNER_ADDRESS = '$OWNER_ADDRESS'
var OWNER_PASS = '$PASS'
var VALIDATORS = $VALIDATORS
$foundersArray
EOF

PRELOAD="--preload $CHAIN_DIR/metronome.js,$CHAIN_DIR/const.js,js/common.js,$CHAIN_DIR/initMetronome.js"

# Local with interactive will deploy, init and launch Metronome.
if [[ $LOCAL = 1 ]] && [[ $INTERACTIVE = 1 ]]
then
  geth attach $PARITY_URL $PRELOAD,$CHAIN_DIR/launchMetronome.js$SEED
  exit 0
fi

# For live and test environment, we want to force two step process 1) Deploy and init 2) launch
if [[ $INTERACTIVE = 1 ]]
  then
  geth attach $PARITY_URL $PRELOAD
else 
  geth --exec 'eth.blockNumber' attach $PARITY_URL $PRELOAD
fi
echo 'To launch metronome, execute launch script using command ./launch --owner <address of new owner of contracts> --pass <password of owners address>, --auction <start time in epoc seconds>'

exit 0
